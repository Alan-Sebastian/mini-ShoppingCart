var db=require('../config/connection')
var collection=require('../config/collections');
const bcrypt=require('bcrypt');
const {ObjectId} = require('mongodb');
const { response } = require('express');
module.exports={
  doSignup:(adminData) =>{
    console.log(adminData);
    return new Promise(async(resolve,reject) =>{
        adminData.password= await bcrypt.hash(adminData.password,10)
        db.get().collection(collection.ADMIN_COLLECTION).insertOne(adminData).then((data) =>{
        adminData._id=data.insertedId
        console.log(adminData)
            resolve(adminData)
        })       
    })
},
doLogin:(adminData) =>{
  return new Promise(async (resolve,reject) =>{
      let loginStatus=false
      let response={}
      let admin=await db.get().collection(collection.ADMIN_COLLECTION).findOne({email:adminData.email})
if(admin)
{
  bcrypt.compare(adminData.password,admin.password).then((status) =>{
      console.log(status);
      if(status)
      {
          console.log("login success");
          response.admin=admin
          response.status=true
          resolve(response)
      }else {
          console.log("login failed");
          resolve({status:false})
      }
  })
}else{
  console.log("ADMIN not found");
  resolve({status:false})
}
  })
},
 addProduct:(product,callback)=>{
    console.log(product);
    db.get().collection('product').insertOne(product).then((data)=>{     
      console.log(data);
        callback(data.insertedId)  
  })
},
doLogin:(adminData) =>{
  return new Promise(async (resolve,reject) =>{
      let loginStatus=false
      let response={}
      let admin=await db.get().collection(collection.ADMIN_COLLECTION).findOne({email:adminData.email})
if(admin)
{
  bcrypt.compare(adminData.password,admin.password).then((status) =>{
      console.log(status);
      if(status)
      {
          console.log("login success");
          response.admin=admin
          response.status=true
          resolve(response)
      }else {
          console.log("login failed");
          resolve({status:false})
      }
  })
}else{
  console.log("admin not found");
  resolve({status:false})
}
  })
},
getProduct:()=>{
  return new Promise(async(resolve,reject)=>{
    let products=await db.get().collection(collection.PRODUCT_COLLECTION).find().toArray()
    resolve(products)
  })
},
getOrders:()=>{
  return new Promise(async(resolve,reject)=>{
    let orders=await db.get().collection(collection.ORDER_COLLECTION).find().toArray()
    resolve(orders)
  })
},
deleteProduct:(proId)=>{
  return new Promise((resolve,reject)=>{
    db.get().collection(collection.PRODUCT_COLLECTION).deleteOne({_id: new ObjectId(proId)}).then((response)=>{
      console.log(response);
      resolve(response)
    })
  })
},
getProductDetail:(proId)=>{
  return new Promise((resolve,reject)=>{
    db.get().collection(collection.PRODUCT_COLLECTION).findOne({_id:new ObjectId(proId)}).then((product)=>{
      resolve(product)
    })
  })
},
updateProduct:(proId,prodDetail)=>{
  return new Promise((resolve,reject)=>{
    db.get().collection(collection.PRODUCT_COLLECTION).updateOne({_id:new ObjectId(proId)},{$set:{
      name:prodDetail.name,
      description:prodDetail.description,
      category:prodDetail.category,
      price:prodDetail.price
    }
    }).then((response)=>{
      resolve()
    })
  })

}
}